from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

from start_bot.helper_bot import bot, dp
from aiogram import types, Dispatcher

from data import config
from models import *
from handlers.helper import keyboards
from handlers.helper import states

from handlers.helper import TEXTS, utils

import time

async def set_card_handler(message: types.Message, state: FSMContext):
	args = message.get_args()
	if args:
		args = args.split()
		if len(args) != 1:
			await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n\n<code>/set_card new_value</code>')
			return
	else:
		await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n\n<code>/set_card new_value</code>')
		return
	t = TeamConfig.select()
	t[0].card = args[0]
	t[0].save()
	await message.answer('–ì–æ—Ç–æ–≤–æ!')
	
async def set_number_handler(message: types.Message, state: FSMContext):
	args = message.get_args()
	if args:
		args = args.split()
		if len(args) != 1:
			await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n\n<code>/set_number new_value</code>')
			return
	else:
		await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n\n<code>/set_number new_value</code>')
		return

	t = TeamConfig.select()
	t[0].number = args[0]
	t[0].save()
	await message.answer('–ì–æ—Ç–æ–≤–æ!')
	
async def profit_handler(message: types.Message, state: FSMContext):
	args = message.get_args()
	if args:
		print(args)
		args = args.split()
		if len(args) != 2:
			await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n\n<code>/profit userId value</code>')
			return
		profit = Profit(
			worker_id=int(args[0]),
			mamont_id=None,
			price=int(args[1]),
			time=time.time()
		)
		profit.save()
		worker = Worker.get(user_id=int(args[0]))
		chat = await bot.get_chat(int(args[0]))
		if profit.price < 10_000:
			photo = 'profit_1.png'
		elif profit.price < 30_000:
			photo = 'profit_2.png'
		else:
			photo = 'profit_3.png'
		photo = InputFile(photo)
		await message.answer('start')
		# await bot.send_message(config.CHAT, TEXTS.new_profit(worker=worker, worker_chat=chat, profit=profit, mamont=mamont))
		await bot.send_photo(config.CHAT, photo, caption=TEXTS.new_profit(worker=worker, worker_chat=chat, profit=profit, mamont=None))
		await message.answer('–ì–æ—Ç–æ–≤–æ')

		# await bot.send_message(config.CHAT, TEXTS.new_profit(worker=worker, worker_chat=chat, profit=profit, mamont=None))
	else:
		await message.answer('/profit user_id price')

async def start_handler(message: types.Message, state: FSMContext):
	await state.finish()
	worker = Worker.get_or_none(user_id=message.from_user.id)
	if not worker:
		worker = Worker.create(
             	user_id=message.from_user.id,
                tag=utils.generate_random_tag(),
                created_time=time.time()
                )
		worker.save()
	await message.answer(TEXTS.start, reply_markup=keyboards.start())


async def bots(message: types.Message, state: FSMContext):
    await message.answer('<b>üìä –¢—Ä–µ–π–¥–∏–Ω–≥ 2.0</b>', reply_markup=keyboards.bots())

async def main_menu(message: types.Message, state: FSMContext):
	profits = Profit.select()
	profits = [i.price for i in profits]
	text = f'''<b>üíª –û –ø—Ä–æ–µ–∫—Ç–µ</b>
	
üí† –ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å: 14.02.2023
üí∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{len(profits)}</b>
üí∞–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{sum(profits)} ‚ÇΩ</b>

<b>–í—ã–ø–ª–∞—Ç—ã</b> –ø—Ä–æ–µ–∫—Ç–∞:
–ó–∞–ª–µ—Ç - <b>80%</b>
–ó–∞–ª–µ—Ç —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - <b>70%</b>

<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ</b> —Å–µ—Ä–≤–∏—Å–æ–≤:
üü° –¢—Ä–µ–π–¥–∏–Ω–≥ 2.0
üü° –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–æ—Ä–∫'''
	await message.answer(text, reply_markup=keyboards.main())

async def profile(message: types.Message, state: FSMContext):
    await message.answer(TEXTS.profile(message.from_user), reply_markup=keyboards.profile())


async def change_tag(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥', reply_markup=keyboards.cancel())
    await states.Tag.Set.set()

async def switch_tag(call: types.CallbackQuery, state: FSMContext):
    worker = Worker.get(user_id=call.from_user.id)
    worker.useTag = not worker.useTag
    worker.save() 
    await call.message.edit_text(TEXTS.profile(call.from_user), reply_markup=keyboards.profile())
    
async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
     await state.finish()
     await call.message.delete()

async def link_mentor_handler(call: types.CallbackQuery, state: FSMContext):
     await state.finish()
     await call.message.delete()
     mentor_id = int(call.data.split('$')[1])
     worker = Worker.get(user_id=call.from_user.id)
     worker.mentor_id = mentor_id
     worker.save()
    

async def set_tag(message: types.Message, state: FSMContext):
	worker = Worker.get(user_id=message.from_user.id)
	worker.tag = message.text[:15]
	worker.save()
	await message.answer(TEXTS.profile(message.from_user), reply_markup=keyboards.profile())
    
async def mentor_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–∞:', reply_markup=keyboards.mentors())
 
async def check_check(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫', reply_markup=keyboards.cancel())
    await states.Check.Send.set()

async def report_card(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç—É', reply_markup=keyboards.cancel())
    await states.Card.Send.set()

async def set_card(message: types.Message, state: FSMContext):
	await message.answer('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
	await state.finish()
	report = ReportedCard.create(value=message.text)
	report.save()
      
async def set_check(message: types.Message, state: FSMContext):
	await message.answer('–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
	await state.finish()
	for user_id in config.CHECKERS:
		try:
			await bot.copy_message(user_id, message.chat.id, message_id=message.message_id)
			await bot.send_message(user_id, f'''–ù–æ–≤—ã–π —á–µ–∫!\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏—Ç–∞:\n
				<code>/profit {message.from_user.id} </code> –∏ —Å—É–º–º–∞''')
		except Exception as e:
			print(e)

def calculate_profit_stats(start_date, end_date, user_id):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
	profits = Profit.select().where((Profit.time.between(start_date, end_date)) & (Profit.worker_id==user_id))
		
		# –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ profit'–æ–≤
	total_profit = sum([i.price for i in profits])
	count_profit = profits.count()
		
	return count_profit, total_profit


async def me_handler(message: types.Message, state: FSMContext):
	worker = Worker.get_or_none(user_id=message.from_user.id)
	if not worker:
		await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–æ—Ä–∫–µ—Ä–æ–º')
		return
	
	start_date = int(time.time() - 86400)
	end_date = int(time.time())
	day = calculate_profit_stats(start_date, end_date, message.from_user.id)
	start_date = int(time.time() - 604800)
	end_date = int(time.time())
	week = calculate_profit_stats(start_date, end_date, message.from_user.id)
	start_date = int(time.time() - 2592000)
	end_date = int(time.time())
	month = calculate_profit_stats(start_date, end_date, message.from_user.id)
	full = calculate_profit_stats(0, end_date, message.from_user.id)
	chat = await bot.get_chat(message.from_user.id)
	work = f'<a href="{chat.user_url}">{chat.first_name}</a>'
	dates = round((time.time() - worker.created_time)//(24*60*60))

	text = f'''üë®‚Äçüíª –í–æ—Ä–∫–µ—Ä - {work}
Telegram ID: {message.from_user.id}

<b>{full[0]}</b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{full[1]}‚ÇΩ</b>

–ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: <b>{round(full[1] * 0.8)}‚ÇΩ</b>
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{round((full[1] / full[0]) if full[0] else 0)}‚ÇΩ</b>
–í –∫–æ–º–∞–Ω–¥–µ: {dates} –¥–Ω—è, 0 –≤–∞—Ä–Ω–æ–≤'''
# 	text = f'''<b>–ü—Ä–æ—Ñ–∏—Ç—ã {message.from_user.first_name}:

# –ó–∞ –¥–µ–Ω—å: {day[0]} –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ {day[1]} —Ä
# –ó–∞ –Ω–µ–¥–µ–ª—é: {week[0]} –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ {week[1]} —Ä
# –ó–∞ –º–µ—Å—è—Ü: {month[0]} –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ {month[1]} —Ä</b>'''
	
	await message.answer(text)


async def info_handler(message: types.Message, state: FSMContext):
	text = '''üéæ –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞ 

üèÜ –¢–æ–ø –º–µ—Å—è—Ü–∞/–Ω–µ–¥–µ–ª–∏/–¥–Ω—è
‚î£ /top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
‚î£ /topd - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞ –¥–µ–Ω—å
‚îó /topm - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü

‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚î£ /curators - –°–ø–∏—Å–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
‚î£ /rules - –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ 
‚îó /card - –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤

üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚î£ /me - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
‚î£ /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚îó /info - –ò–Ω—Ñ–æ –æ –≤–æ—Ä–∫–µ—Ä–µ'''
	await message.answer(text)

async def card_handler(message: types.Message, state: FSMContext):
	text = '''üá∑üá∫ 2200 2804 1235 1258
‚îó 79969980487 (–°–ë–ü)
–ú–¢–° –ë–∞–Ω–∫

‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º —á–µ–∫.
–ß–µ–∫–∏ —Å–∫–∏–¥—ã–≤–∞—Ç—å –≤ –õ–° –¢–°–£.'''
	await message.answer(text)

async def curators_handler(message: types.Message, state: FSMContext):
	mentors = Mentor.select()
	text = ''
	for i in mentors:
		chat = await bot.get_chat(i.user_id)
		text += f'<a href="{chat.user_url}">{i.name}</a>\n'
	text = f'''<b>–ö—É—Ä–∞—Ç–æ—Ä—ã:
	
{text}</b>'''
	await message.answer(text)

async def rules_handler(message: types.Message, state: FSMContext):
	text = '''<b>üöî –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

–ß–∞—Å—Ç—å 1| –ü—Ä–∞–≤–∏–ª–∞ –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Ä–Ω/–º—É—Ç</b>

1.1 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤/–∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞. 
1.2 –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ (GIF, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ). 
1.3 –í—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –ø—Ä–æ –ø–æ–ª–∏—Ç–∏–∫—É/–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ –ª–∏–±–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã, —Ç–æ –∏–¥–∏—Ç–µ –≤ –ø–æ–ª–∏—Ç–∏–∫—É.
1.4 –õ—é–±—ã–µ –í—ã—Å–∫–∞–∑—ã–≤–∞—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –æ—Å—É–∂–¥–∞–µ–º —Ç–∞–∫–æ–µ –∏ –ø—Ä–∏–∑—ã–≤–∞–µ–º –≤–∞—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ –≤—Å–µ–º —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. –ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ —Ç–æ –¥–æ–ª–±–∞–µ–±–∞ –∏ —Ä–æ–¥–∏–ª–∞ —à–ª—é—Ö–∞ —Ç–æ —Å—É–¥–∏—Ç—å –Ω–µ –≤–∞–º
1.5 –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ/–≤—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ 
1.6 –°–ø–∞–º/–§–ª—É–¥ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏/–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
1.7 –ü—Ä–æ—Ñ–∏—Ç –±–µ–∑ –≤–æ—Ä–∫–µ—Ä–∞ - –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ï—Å–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —á—Ç–æ –ø—Ä–æ—Ñ–∏—Ç –µ–≥–æ)
 
<b>–ß–∞—Å—Ç—å 2 | –ü—Ä–∞–≤–∏–ª–∞ –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–∞–Ω </b>

2.1 –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. 
2.2 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω—ã–º –¢–ü, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–¥–∞–ª –≤–∞–º —Å—Ç–∞—Ñ—Ñ –ø—Ä–æ–µ–∫—Ç–∞
2.3 –ü–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞, —Ä–µ–∫–ª–∞–º–∞ –∫–∞–∫–∏—Ö –ª–∏–±–æ —É—Å–ª—É–≥ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞
2.4 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤–æ—Ä–∫–µ—Ä–∞–º –æ—Ç –ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.

<b>–ß–∞—Å—Ç—å 3 | –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞</b>

3.1 –ï—Å–ª–∏ –≤—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫, –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã, —Ç–æ –≤—ã–ø–ª–∞—Ç–∞ —Å–≥–æ—Ä–∞–µ—Ç.
3.2 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–ª–∞—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞—Ä—É—é* –∫–∞—Ä—Ç—É
3.3   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –Ω–µ –æ–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É  –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞/–º—É—Ç–∞/–±–∞–Ω–∞.
3.4 –õ–æ–∫–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –¢–°–ê. –ú—ã –Ω–µ –æ–±—è–∑—ã–≤–∞–µ–º—Å—è –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –ª–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å–ª—É—á–∏—Ç—Å—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ.

* –°—Ç–∞—Ä–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /card –∏/–∏–ª–∏ –≤ –±–æ—Ç–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ –ø—è—Ç—å –º–∏–Ω—É—Ç (–≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ —á–µ–∫–µ)'''
	await message.answer(text)

def get_top_10_workers(min_time=0):
    # –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º—ã price –¥–ª—è –∫–∞–∂–¥–æ–≥–æ worker_id —Å —É—Å–ª–æ–≤–∏–µ–º time –±–æ–ª—å—à–µ min_time
    worker_prices = Profit.select(Profit.worker_id, fn.Sum(Profit.price).alias('price_sum')) \
        .where(Profit.time > min_time) \
        .group_by(Profit.worker_id) \
        .order_by(SQL('price_sum DESC')) \
        .limit(10)

    top_10_worker_ids = [worker.worker_id for worker in worker_prices]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ worker_id —Å –¥–∞–Ω–Ω—ã–º–∏ [worker_id, price_sum, price_len]
    top_10_workers = []

    for worker_id in top_10_worker_ids:
        worker_data = [worker_id, 0.0, 0]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã price –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ worker_id —Å —É—Å–ª–æ–≤–∏–µ–º time –±–æ–ª—å—à–µ min_time
        worker_info = Profit.select(fn.Sum(Profit.price).alias('price_sum'), fn.Count(Profit.price).alias('price_len')) \
            .where(Profit.worker_id == worker_id, Profit.time > min_time) \
            .group_by(Profit.worker_id) \
            .first()

        if worker_info:
            worker_data[1] = worker_info.price_sum
            worker_data[2] = worker_info.price_len

        top_10_workers.append(worker_data)

    return top_10_workers

async def top_handler(message: types.Message, state: FSMContext):
	top_10_workers = get_top_10_workers()
	print(top_10_workers)
	full_profit = Profit.select().where(Profit.time > 0)
	full_profit = sum([i.price for i in full_profit])
	text = f'''<b>ü™ê –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n\n'''
	num = 0
	for i in top_10_workers:
		num += 1
		worker = Worker.get(user_id=i[0])
		worker_chat = await bot.get_chat(i[0])
		if num == 1:
			number = 'ü•á'
		elif num == 2:
			number = 'ü•à'
		elif num == 3:
			number = 'ü•â'
		else: 
			number = num
		tag = f'#{worker.tag}' if worker.useTag else f'''<a href="{worker_chat.user_url}">{worker_chat.first_name}</a>'''
		tag = f'{tag} - <b>{i[1]}‚ÇΩ</b> - –ü—Ä–æ—Ñ–∏—Ç–æ–≤: {i[2]}'
		tag = f'{number} - {tag}\n'
		text+=tag
	text += f'\n<b>üí∞–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {full_profit}‚ÇΩ</b>'
	await message.answer(text)

async def topd_handler(message: types.Message, state: FSMContext):
	min_time = time.time() - 7 * 24* 60 * 60
	top_10_workers = get_top_10_workers(min_time)
	print(top_10_workers)
	full_profit = Profit.select().where(Profit.time > min_time)
	full_profit = sum([i.price for i in full_profit])
	text = f'''<b>ü™ê –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:</b>\n\n'''
	num = 0
	for i in top_10_workers:
		num += 1
		worker = Worker.get(user_id=i[0])
		worker_chat = await bot.get_chat(i[0])
		if num == 1:
			number = 'ü•á'
		elif num == 2:
			number = 'ü•à'
		elif num == 3:
			number = 'ü•â'
		else: 
			number = num
		tag = f'#{worker.tag}' if worker.useTag else f'''<a href="{worker_chat.user_url}">{worker_chat.first_name}</a>'''
		tag = f'{tag} - <b>{i[1]}‚ÇΩ</b> - –ü—Ä–æ—Ñ–∏—Ç–æ–≤: {i[2]}'
		tag = f'{number} - {tag}\n'
		text+=tag
	text += f'\n<b>üí∞–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {full_profit}‚ÇΩ</b>'
	await message.answer(text)

async def topm_handler(message: types.Message, state: FSMContext):
	min_time = time.time() - 30 * 24* 60 * 60
	top_10_workers = get_top_10_workers(min_time)
	print(top_10_workers)
	full_profit = Profit.select().where(Profit.time > min_time)
	full_profit = sum([i.price for i in full_profit])
	text = f'''<b>ü™ê –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü:</b>\n\n'''
	num = 0
	for i in top_10_workers:
		num += 1
		worker = Worker.get(user_id=i[0])
		worker_chat = await bot.get_chat(i[0])
		if num == 1:
			number = 'ü•á'
		elif num == 2:
			number = 'ü•à'
		elif num == 3:
			number = 'ü•â'
		else: 
			number = num
		tag = f'#{worker.tag}' if worker.useTag else f'''<a href="{worker_chat.user_url}">{worker_chat.first_name}</a>'''
		tag = f'{tag} - <b>{i[1]}‚ÇΩ</b> - –ü—Ä–æ—Ñ–∏—Ç–æ–≤: {i[2]}'
		tag = f'{number} - {tag}\n'
		text+=tag
	text += f'\n<b>üí∞–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {full_profit}‚ÇΩ</b>'
	await message.answer(text)

async def mail_handler(message: types.Message, state: FSMContext):
	await states.Worker.setMail.set()
	await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=keyboards.cancel())


async def set_mail_handler(message: types.Message, state: FSMContext):
	await state.finish()
	# await bot.delete_message(message.chat.id, message.message_id)
	await bot.delete_message(message.chat.id, message.message_id-1)
	workers = Worker.select()
	for worker in workers:
		try:
			await message.copy_to(worker.user_id)
		except Exception as e:
			pass
	await bot.delete_message(message.chat.id, message.message_id)
	await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


def register_handlers(dp: Dispatcher):
	dp.register_message_handler(mail_handler, commands=['mail'], state='*')
	dp.register_message_handler(set_mail_handler, content_types=types.ContentTypes.ANY, state=states.Worker.setMail)


	dp.register_message_handler(top_handler, commands=['top'], state='*')
	dp.register_message_handler(topd_handler, commands=['topd'], state='*')
	dp.register_message_handler(topm_handler, commands=['topm'], state='*')

	dp.register_message_handler(me_handler, commands=['info', 'me'], state='*')
	dp.register_message_handler(info_handler, commands=['help'], state='*')
	dp.register_message_handler(card_handler, commands=['card'], state='*')
	dp.register_message_handler(rules_handler, commands=['rules'], state='*')
	dp.register_message_handler(curators_handler, commands=['curators'], state='*')
	dp.register_message_handler(start_handler, commands=['start', 'restart'], state='*')
	dp.register_message_handler(profit_handler, commands=['profit'], state='*')
	dp.register_message_handler(set_card_handler, commands=['set_card'], state='*')
	dp.register_message_handler(set_number_handler, commands=['set_number'], state='*')
	dp.register_message_handler(main_menu, content_types=['text'], state='*', text='üíª –û –ø—Ä–æ–µ–∫—Ç–µ')
	dp.register_message_handler(profile, content_types=['text'], state='*', text='üìÅ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
	dp.register_message_handler(bots, content_types=['text'], state='*', text='üìä –¢—Ä–µ–π–¥–∏–Ω–≥ 2.0')
	dp.register_callback_query_handler(change_tag, text='change_tag', state='*')
	dp.register_callback_query_handler(switch_tag, text='switch_tag', state='*')
	dp.register_callback_query_handler(cancel_handler, text='cancel', state='*')
	dp.register_callback_query_handler(link_mentor_handler, text_startswith='link_mentor', state='*')
	dp.register_message_handler(set_tag, content_types=['text'], state=states.Tag.Set)
	dp.register_callback_query_handler(mentor_handler, text='mentor', state='*')
	dp.register_callback_query_handler(check_check, text='check_check', state='*')
	dp.register_callback_query_handler(report_card, text='report_card', state='*')
	dp.register_message_handler(set_card, content_types=['text'], state=states.Card.Send)
	dp.register_message_handler(set_check, content_types=types.ContentTypes.ANY, state=states.Check.Send)
